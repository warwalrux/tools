#!/usr/bin/env python3

import sys
import os
import argparse
import json

inversion = {
    'configure': 'reconfigure',
    'install': 'purge',
    'purge': 'install',
    'remove': 'install',
    'upgrade': 'downgrade'
}

def getOpts () :
    parser = argparse.ArgumentParser(description='dpkg-history transactional dpkg history view')
    parser.add_argument('-j', '--job', help='Job ID by index')
    args = parser.parse_args()
    return args

def main():
    dpkghistory = {}
    logfile = open("/var/log/dpkg.log", "r")
    jobindex = 1

    index = []
    for line in logfile.readlines():
        linelist = line.split(' ')
        time_formatted = linelist[1].split(':')[0] + ":" + linelist[1].split(':')[1]
        linelist[1] = time_formatted
        index.append(linelist)

    jobs = {}
    for line in index:
        time_key = line[0] + " " + line[1]
        if time_key not in jobs:
            jobs[time_key] = {
                'actions': {},
                'statuses': [],
            }
        if line[2] == "status":
            jobs[time_key]['statuses'].append(line[3:len(line)])
        elif line[2] != "trigproc" and line[2] != "startup":
            action = { line[2]: line[3].split(':')[0] }
            jobs[time_key]['actions'].update(action)
    
    job_index = {}
    jobindex = 1
    for key, value in jobs.items():
        job_index[jobindex] = {
            key: value
        }
        jobindex += 1

    ui(job_index)

def ui(data):
    print("Index\t|  Job Date\t\t|  Transaction")
    print("----------------------------------------------------")
    for jobid in data.keys():
        print(str(jobid) + "\t|  " + data[jobid].keys()[0] + "\t|  " + ", ".join(data[jobid][data[jobid].keys()[0]]['actions'].keys()))
#        print(str(jobid) + "\t|  " +  data[jobid].key()[0] )
    jobnum = raw_input("select your job by job index: ")
    print(json.dumps(data[int(jobnum)][data[int(jobnum)].keys()[0]]['actions'], indent=4))
    for key in data[int(jobnum)][data[int(jobnum)].keys()[0]]['actions'].keys():
        print(inversion[key]) 
    

if __name__ == "__main__":
	main()

