#!/usr/bin/env python3

""" Useful Python contains useful funcitons """

import ast
import argparse
import json
import logging
import pprint
import pickle
import sys
import yaml

logging.basicConfig(level=logging.DEBUG)

PP = pprint.PrettyPrinter()

# YAML prettifier for those extra long lines
def str_presenter(dumper, data):
    """Pretty string presenter for yaml.dump"""
    represented_data = repr(data)
    if (
            r"\n" in represented_data
            or r"\\" in represented_data
            or len(represented_data) > 150
    ):  # check for multiline string
        return dumper.represent_scalar("tag:yaml.org,2002:str", data, style="|")
    return dumper.represent_scalar("tag:yaml.org,2002:str", data)


# deep_merge list append prefer
# Set to: "A" to prefer lists from dict A
# Set to: "B" to prefer lists from dict B
# Set to: None / Unset to error out.

# Preference is set to B so that dist / arch processing works as intended.
class Merger():
    """ Merge handler """
    def __init__(self):
        """ init new merger object"""
        self.prefer = "A"
        self.fudge = False
        self.clobber = False

    def deep_merge(self, a_dict, b_dict, path=None):
        """Merges b_dict into a_dict"""
        if path is None:
            path = []
        for key in b_dict:
            if key in a_dict:
                if isinstance(a_dict[key], dict) and isinstance(b_dict[key], dict):
                    self.deep_merge(a_dict[key], b_dict[key], path + [str(key)])
                elif isinstance(a_dict[key], list) and isinstance(b_dict[key], list):
                    logging.debug(
                        'Deep Merge List Preference is set to "%s"', self.prefer
                    )
                    if self.prefer == "B":
                        a_dict[key] = [*b_dict[key], *a_dict[key]]
                    elif self.prefer == "A":
                        a_dict[key] = [*a_dict[key], *b_dict[key]]
                    else:
                        logging.debug("Deep Merge List Preference is not set!")
                        raise Exception("Conflict at %s" % ".".join(path + [str(key)]))
                elif a_dict[key] == b_dict[key]:
                    pass  # same leaf value
                else:
                    if self.clobber:
                        logging.debug("it's clobbering time!")
                        if self.prefer == "B":
                            a_dict[key] = b_dict[key]
                        else:
                            pass
                    elif self.fudge:
                        a_dict[key] = self.shallow_merge(a_dict[key], b_dict[key])
                    else:
                        raise Exception("Conflict at %s" % ".".join(path + [str(key)]))
            else:
                a_dict[key] = b_dict[key]
        return a_dict

    def shallow_merge(self, a_data, b_data):
        """puts named dicts side by side in a dict"""
        retval = {}
        retval["a"] = a_data
        retval["b"] = b_data
        return retval

def try_json(data):
    """ Attempt JSON load """
    logging.debug("Attempting to parse as JSON")
    try:
        tmp_data = json.loads(data.read())
        return tmp_data
    except:
        logging.debug("JSON load check failed.")
        raise ValueError


def try_ast(data):
    """ Attempt AST Eval """
    logging.debug("Attempting AST evaluation")
    try:
        tmp_data = ast.literal_eval(data.read())
        return tmp_data
    except:
        logging.debug("ASF Eval failed.")
        raise ValueError


def try_yaml(data):
    """ Attempt YAML load """
    logging.debug("Attempting to parse as YAML")
    try:
        tmp_data = yaml.safe_load(data.read())
        return tmp_data
    except:
        logging.debug("YAML load check failed")
        raise ValueError


def try_picl(data):
    """ Attempt PICL load """
    logging.debug("Attempting to parse as Pickle")
    try:
        tmp_data = pickle.load(data)
        return tmp_data
    except:
        logging.debug("Unpickling failed.")
        raise ValueError


def load_data_file(path):
    """ Iterate through the things to try """
    logging.info("Parsing: %s for merge.", path)
    data = open(path, "rb")
    checks = [try_json, try_picl, try_yaml, try_ast]
    for check in checks:
        data.seek(0)
        try:
            tmp_data = check(data)
            break
        except ValueError:
            continue

    return tmp_data


def main(argv):
    """ Run useful python bits """
    # The known_key key list defines the order of operations
    # Known keys should be in the order in which you want them
    # processed / to appear in the final jobs listings.

    # YAML Output Formatting
    yaml.add_representer(str, str_presenter)
    yaml.representer.SafeRepresenter.add_representer(str, str_presenter)

    merger = Merger()

    # Arguments
    parser = argparse.ArgumentParser(
        description="Travis to Github Actions Conversion script"
    )
    parser.add_argument("-a", "--afile", required=True, help="input file containing dict a")
    parser.add_argument("-b", "--bfile", required=True, help="input file containing dict b")
    parser.add_argument("-q", "--quiet", action="store_true", help="silence output")
    parser.add_argument("--toggle-pref", action="store_true", help="set prefer to bfile")

    changer = parser.add_mutually_exclusive_group()
    changer.add_argument("--fudge", action="store_true", help="show all conflicts as a: <val> b: <val>")
    changer.add_argument("--clobber", action="store_true", help="clobber changes with preferred dict")

    args = parser.parse_args(argv)

    if args.toggle_pref:
        merger.prefer = "B"
    if args.fudge:
        merger.fudge = True
    if args.clobber:
        merger.clobber = True

    a_data = load_data_file(args.afile)
    b_data = load_data_file(args.bfile)

    merge_result = merger.deep_merge(a_data, b_data)
    logging.info("Merged %s -> %s", args.bfile, args.afile)

    if not args.quiet:
        PP.pprint(merge_result)


if __name__ == "__main__":
    main(sys.argv[1:])
