#!/usr/bin/python3 -B
import argparse
import requests
import json
import sys
import jinja2

url="https://api.github.com"

def getOpts():
    parser = argparse.ArgumentParser(description='github api caller')
    parser.add_argument('-t', '--tokenfile', help="github API token")

    searcher = parser.add_mutually_exclusive_group(required=True)
    searcher.add_argument('-q', '--api', help="GitHub API Query String")
    searcher.add_argument('-Q', '--gql', help="GraphQL API Query String")

    output = parser.add_mutually_exclusive_group()
    output.add_argument('-j', '--j2', help="jinja2 formatting string")
    output.add_argument('-o', '--outfile', help="dump raw data to file")
    args = parser.parse_args()
    return args

def queryGH (query, head):
    # Determine how many pages of results we're looking at
    results = {}
    t = requests.get(url + "/search/code?per_page=100&q=" + query, headers=head)
    if t.status_code != 200:
        print(t.json())
        sys.exit(1)

    if t.json()["incomplete_results"]:
        print("Incomplete result set delivered.")
    else:
        results = t.json()

    results["results"] = results["items"]
    results.pop("items")
    return results

def GQLQueryGH (query, head):
    results = {}
    t = requests.get(url + "/graphql", json={'query': query}, headers=head)
    if t.status_code != 200:
        print(t.json())
        sys.exit(1)

    results = t.json()
    
    #results["results"] = results["items"]
    #results.pop("items")
    return results

def main () :
    args = getOpts()
    
    # Check token stuffs
    if not args.tokenfile: 
        print("No token provided")
        sys.exit(1)
    token_file = open(args.tokenfile,"r")
    my_token = token_file.readlines()[0].rstrip()
    head={ 'Authorization': 'token ' + my_token, "content-type":"text" }

    if args.query:
        results = queryGH(args.query, head)
    elif args.gql:
        results = GQLQueryGH(args.gql, head)
        print(results)
        sys.exit(0)

    if args.outfile:
        json.dump(results, open(args.outfile, "w+"))
    else:
        for result in results["results"]:
            if args.j2:
                t = jinja2.Template(args.j2)
                print(t.render(result=result))
            else:
                print(json.dumps(result))

    print("Total Results: %s" % results["total_count"])
            

if __name__ == "__main__":
    main()
